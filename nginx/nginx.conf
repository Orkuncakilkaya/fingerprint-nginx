load_module modules/ngx_http_js_module.so;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    js_import /etc/nginx/proxy.js;

    js_set $agentUrl proxy.getAgentURL;
    js_set $agentQueryParams proxy.getAgentQueryParams;
    js_set $apiBase proxy.getApiBaseFromReqionQueryParam;
    js_set $filteredCookieHeader proxy.getFilteredCookieHeader;
    js_set $ingressQueryParams proxy.getIngressQueryParams;

    # Logging settings
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log debug;
    rewrite_log on;
    # To use variables in proxy_pass, we need to add a resolver directive to tell nginx which DNS server to use
    # Defaults to Google's DNS at 8.8.8.8
    resolver ${DNS_RESOLVER}; 

    server {
        listen 80;
        server_name localhost;

        # Serve static files from mounted volume
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }

        # Browser cache endpoint
        # curl -X GET localhost:8080/identification/1d3n71f1c4710n-r35ul7/abc345/xyz123 -vvv
        # Test the actual request using the JS agent in the index.html file (specify `endpoint: "/identification"`)
        # Matches /${FPJS_GET_RESULT_PATH}/any/number/of/random/segments
        # Does not match /${FPJS_GET_RESULT_PATH}
        location ~ ^/${FPJS_GET_RESULT_PATH}(?:/[a-zA-Z0-9]+)+$ {
            # Only allow GET requests
            limit_except GET { deny all; }

            # Remove `identification` path prefix and forward the rest of the path, including all query params
            rewrite ^/${FPJS_GET_RESULT_PATH}/(.*) /$1 break;
            
            # Use the `region` query param to determine the correct API base URL and forward the request to it
            proxy_pass https://$apiBase;

            # TODO: Are these necessary?
            proxy_ssl_server_name on;
            proxy_set_header Host $apiBase;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Forward all other request headers, except Cookie
            proxy_set_header Cookie "";
            proxy_pass_request_headers on;
        }

        # ToDo: Implement proxy of identification request
        # curl -X POST localhost:8080/${FPJS_GET_RESULT_PATH}/1d3n71f1c4710n-r35ul7 -d '{"key": "value"}' -H "Content-Type: application/json" -vvv
        # Matches /${FPJS_GET_RESULT_PATH}
        # Does not match /${FPJS_GET_RESULT_PATH}/other/segments (the Browser cache endpoint matches those)
        location = /${FPJS_GET_RESULT_PATH} {
            # Only allow POST requests
            limit_except POST { deny all; }
            set $args $ingressQueryParams;

            rewrite ^/${FPJS_GET_RESULT_PATH}(/.*)?$ / break;

            proxy_pass https://$apiBase;
            proxy_ssl_server_name on;
            proxy_set_header Host $apiBase;
            proxy_set_header FPJS-Proxy-Client-IP $remote_addr;
            proxy_set_header FPJS-Proxy-Forwarded-Host $host;
            proxy_set_header FPJS-Proxy-Secret ${FPJS_PROXY_SECRET};

            # Forward all other request headers, except Cookie
            proxy_set_header Cookie $filteredCookieHeader;
            proxy_pass_request_headers on;
        }

        # Proxy /${FPJS_AGENT_DOWNLOAD_PATH} requests to fpcdn.io
        location /${FPJS_AGENT_DOWNLOAD_PATH} {
            set $args $agentQueryParams;
            rewrite ^.*$ $agentUrl break;
            proxy_pass https://fpcdn.io;
            proxy_ssl_server_name on;
            proxy_set_header Host fpcdn.io;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Forward all other request headers, except Cookie
            proxy_set_header Cookie "";
            proxy_pass_request_headers on;
        }
    }
}
